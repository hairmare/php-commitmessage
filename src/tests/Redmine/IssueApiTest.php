<?php

require_once 'src/Redmine/IssueApi.php';

/**
 * No need to stay really clean since we are testing a quite
 * stateful thing anyway. Thus we expose some of the core 
 * privates here so we can at least cover them in a almost
 * sane way. This just means that we really need to do tdd
 * on the stuff in here to make shure nothing breaks.
 */
class Redmine_IssueApi_Unprotected extends Redmine_IssueApi
{
    /**
     * method for overriding lazyInit with Mock
     */
    public function setIssue($issue)
    {
        return $this->_setIssue($issue);
    }
    /**
     * public exposure for testing proper caching
     */
    public function lazyInit()
    {
        return $this->_lazyInit();
    }
}

/**
 * Test class for Redmine_IssueApi.
 * Generated by PHPUnit on 2011-10-28 at 08:47:30.
 */
class Redmine_IssueApiTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Redmine_IssueApi
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_object = new Redmine_IssueApi_Unprotected;

        /* generic issue mock ignores most state and does not try to
         * emulate actionrequest system. I'll test that in acceptance 
         * for now.
         */
        $this->_issue = $this->getMock(
            'Issue',
            array(
                'find',
                'set',
                '_onInit',
            )
        );
        $this->_object->setIssue($this->_issue);

        // i need this for testing fluent interfaces pretty often
        $this->_saver = $this->getMock(
            'stdClass',
            array(
                'save'
            )
        );


    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testLazyInit()
    {
        // this should not replace _issue since that was initialized to a mock
        // this leaves us with a CRAP index of about 2 that can't be further 
        // reduced
        $this->_issue->expects($this->never()) 
                     ->method('_onInit'); // <<<< doens actually work :(
        
        $this->_object->lazyInit();
    }

    /**
     */
    public function testFind()
    {
        $this->_issue->expects($this->once())
                     ->method('find')
                     ->with($this->equalTo(1));

        $this->_object->find(1);
    }

    /**
     */
    public function testSetStatusId()
    {
        $this->_issue->expects($this->once())
                     ->method('find')
                     ->with($this->equalTo(1));

        $this->_issue->expects($this->once())
                     ->method('set')
                     ->with($this->equalTo('status_id'), $this->equalTo(1))
                     ->will($this->returnValue($this->_saver));

        $this->_object->setStatusId(1, 1);
    }

    /**
     */
    public function testAddNoteToTicket()
    {
        $trackerId = 1;
        $noteText = 'Hello World!';
        
        $this->_issue->expects($this->once())
                     ->method('find')
                     ->with($trackerId);
        $this->_issue->expects($this->once())
                     ->method('set')
                     ->with($this->equalTo('notes'), $this->equalTo($noteText))
                     ->will($this->returnValue($this->_saver));

        $this->_object->addNoteToTicket($trackerId, $noteText);
    }
}
