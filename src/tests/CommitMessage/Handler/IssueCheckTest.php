<?php

require_once 'src/CommitMessage/Handler/IssueCheck.php';

/**
 * Test class for CommitMessage_Handler_IssueCheck.
 * Generated by PHPUnit on 2011-10-26 at 21:56:59.
 */
class CommitMessage_Handler_IssueCheckTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var CommitMessage_Handler_IssueCheck
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_object = new CommitMessage_Handler_IssueCheck;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testRun().
     */
    public function testRun()
    {
        $caller = $this->getMock(
            'CommitMessage_HandlerStack',
            array(
                'append'
            )
        );

        $factory = $this->getMock(
            'CommitMessage_Factory',
            array (
                'createRedmineIssueApi',
                'createHandlerIssueChangeStatus'
            )
        );
        $issue = $this->getMock(
            'Redmine_Issue_Api',
            array(
                'find',
                'getStatusId'
            )
        );
        $issue->expects($this->once())
              ->method('getStatusId')
              ->will($this->returnValue(1));

        $statuschange = $this->getMock(
            'CommitMessage_Handler_IssueChangeStatus',
            array(
                'setIssueId',
                'setFactory',
                'setNewStatus'
            )
        );
        $factory->expects($this->once())
                ->method('createRedmineIssueApi')
                ->will($this->returnValue($issue));

        $factory->expects($this->once())
                ->method('createHandlerIssueChangeStatus')
                ->will($this->returnValue($statuschange));

        $this->_object->setCaller($caller);
        $this->_object->setFactory($factory);
        $this->_object->run();
    }
}
